/*
 * This source file was generated by the Gradle 'init' task
 */
package it.gzelante.italianperson

import io.ktor.serialization.kotlinx.json.*
import io.ktor.server.application.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import io.ktor.server.plugins.contentnegotiation.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json

@Serializable
data class GenerateRequest(
    val count: Int = 1
)

@Serializable
data class ApiResponse(
    val success: Boolean,
    val data: List<ItalianPerson>? = null,
    val message: String? = null
)

@Serializable
data class HealthResponse(
    val status: String,
    val service: String,
    val version: String
)

@Serializable
data class ApiEndpoint(
    val health: String,
    val single_person: String,
    val multiple_persons: String
)

@Serializable
data class ApiInfoResponse(
    val service: String,
    val version: String,
    val endpoints: ApiEndpoint
)

class App {
    private val generator = ItalianPersonGenerator()
    
    fun configureRouting(application: Application) {
        application.routing {
            // Health check endpoint
            get("/health") {
                call.respond(
                    HealthResponse(
                        status = "UP",
                        service = "Italian Person Generator",
                        version = "1.0.0"
                    )
                )
            }
            
            // Generate single person
            get("/api/v1/person") {
                try {
                    val person = generator.generatePerson()
                    call.respond(ApiResponse(success = true, data = listOf(person)))
                } catch (e: Exception) {
                    call.respond(ApiResponse(success = false, message = "Error generating person: ${e.message}"))
                }
            }
            
            // Generate multiple persons
            get("/api/v1/persons") {
                try {
                    val count = call.request.queryParameters["count"]?.toIntOrNull() ?: 1
                    val maxCount = 100 // Limit to prevent abuse
                    val actualCount = minOf(count, maxCount)
                    
                    val persons = (1..actualCount).map { generator.generatePerson() }
                    call.respond(ApiResponse(success = true, data = persons))
                } catch (e: Exception) {
                    call.respond(ApiResponse(success = false, message = "Error generating persons: ${e.message}"))
                }
            }
            
            // Root endpoint with API info
            get("/") {
                call.respond(ApiInfoResponse(
                    service = "Italian Person Generator API",
                    version = "1.0.0",
                    endpoints = ApiEndpoint(
                        health = "GET /health",
                        single_person = "GET /api/v1/person",
                        multiple_persons = "GET /api/v1/persons?count=N (max 100)"
                    )
                ))
            }
        }
    }
    
    fun start(port: Int = 8080) {
        embeddedServer(Netty, port = port) {
            install(ContentNegotiation) {
                json(Json {
                    prettyPrint = true
                    isLenient = true
                })
            }
            
            configureRouting(this)
            
        }.start(wait = true)
    }
}

fun main() {
    val port = System.getenv("PORT")?.toIntOrNull() ?: 8080
    println("ðŸ‡®ðŸ‡¹ Starting Italian Person Generator API on port $port")
    println("ðŸ“‹ Available endpoints:")
    println("   GET /health - Health check")
    println("   GET /api/v1/person - Generate single person")
    println("   GET /api/v1/persons?count=N - Generate multiple persons (max 100)")
    println("   GET / - API information")
    println()
    
    App().start(port)
}
