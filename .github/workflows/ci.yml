name: Continuous Integration

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2048m -Dorg.gradle.daemon=false"

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Build JAR
      run: ./gradlew build
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: build/reports/tests/
        retention-days: 7

  build-sample:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install native-image
      run: gu install native-image
      
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Build native executable (sample)
      run: ./gradlew nativeCompile
      
    - name: Test native executable
      run: |
        echo "Testing native executable..."
        ls -la build/native/nativeCompile/
        file build/native/nativeCompile/italian-person-generator
        
        # Start the service in background
        ./build/native/nativeCompile/italian-person-generator &
        SERVICE_PID=$!
        
        # Wait for service to start
        sleep 10
        
        # Test endpoints
        echo "Testing health endpoint..."
        curl -f http://localhost:8080/health || exit 1
        
        echo "Testing person generation..."
        curl -f http://localhost:8080/api/v1/person || exit 1
        
        echo "Testing multiple persons..."
        curl -f "http://localhost:8080/api/v1/persons?count=2" || exit 1
        
        # Stop the service
        kill $SERVICE_PID
        
        echo "âœ… All tests passed!" 